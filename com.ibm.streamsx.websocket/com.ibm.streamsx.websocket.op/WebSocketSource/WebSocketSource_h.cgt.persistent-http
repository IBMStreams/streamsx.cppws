/*
==============================================
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2020
==============================================
*/

/*
============================================================
First created on: Feb/23/2020
Last modified on: Aug/31/2020

This include file contains the necessary inclusion of 
other C++ header files, declaration of member variables and
output assignment functions for the WebSocketSource operator.

This file will be used in conjunction with the
operator model file (WebSocketSource.xml) and the operator
implementation C++ file (WebSocketSource_cpp.cgt).
============================================================
*/

/* Additional includes go here */
// Websocketpp server include files
#include <websocketpp/config/asio.hpp>
#include <websocketpp/server.hpp>
#include <iostream>
#include <fstream>
#include <iterator>
#include <algorithm>
#include <vector>
// Operator metrics related include files.
#include <SPL/Runtime/Common/Metric.h>
#include <SPL/Runtime/Operator/OperatorMetrics.h>

<%SPL::CodeGen::headerPrologue($model);%>

// State transition for a remote WebSocket client that
// we will maintain inside this operator.
#define CLIENT_OPENED_A_WS_CONNECTION 1
#define CLIENT_STARTED_A_WS_SESSION 2
#define CLIENT_ENDED_AN_STT_SESSION 3

/*
Please read this if you want to support persistent HTTP connections
-------------------------------------------------------------------
websocket++ library's support of persistent HTTP client connections has not 
yet been pulled into its main release as of Aug/2020. However, that feature has 
already been built, fully tested and available in a separate branch which is
an incremental update to the official release v0.8.2. You can read more
about this in these URLs.

https://github.com/zaphoyd/websocketpp/issues/513
https://github.com/zaphoyd/websocketpp/pull/541

Look at the http_echo_server.cpp file in this URL for how the new feature gets used in an application.
https://github.com/zaphoyd/websocketpp/pull/541/commits/b8139e4bf1c2013c79621acc8ee1e3cd5b275813

Persistent HTTP connection feature may be an overkill for the client applications that 
send data sporadically (e-g: Browser-based applications). However, this feature is beneficial 
for the non-browser based client applications that plan to send hundreds of data items 
continuously in a tight loop or to send periodic heavy bursts of data items.  

Until this feature is made available in a future release of the websocketpp library, 
any streamsx.websocket toolkit user who wants to support the persistent HTTP (Keep-Alive) 
client connections in their application(s) can follow these simple instructions.

1) Download the streamsx.websocket toolkit v1.0.7 or later from the IBMStreams GitHub.
2) Get it built and installed via the ant tool as explained in the documentation.
3) Manually download the websocketpp library from this URL that has the 
   persistent HTTP connection feature.
   https://github.com/sergeyroots/websocketpp/tree/feature/enable-persistent-http-requests
   [Click on the green color "Code" button and download the ZIP.]
4) Unzip the downloaded file on your IBM Streams Linux machine.
5) Inside your com.ibm.streamsx.websocketpp/include directory, delete the 
   entire websocketpp sub-directory automatically installed by step (2).
6) From the resulting unzipped directory in step (4), move the entire websocketpp
   sub-directory to your com.ibm.streamsx.websocketpp/include directory.
7) Inside your com.ibm.streamsx.websocketpp/com.ibm.streamsx.websocket.op/WebSocketSource 
   sub-directory, run the following two copy commands.
   a) cp  WebSocketSource_h.cgt.persistent-http   WebSocketSource_h.cgt
   b) cp  WebSocketSource_cpp.cgt.persistent-http   WebSocketSource_cpp.cgt
   c) rm  -f   *.pm
8) You can compile your application(s) now after which it will be able to  
   handle the persistent HTTP (Keep-Alive) client connections.
   --> A new operator parameter "allowPersistentHttpConnections" gives 
   control to the user to tell this operator whether to allow or not allow
   persistent HTTP connections from clients. By default, this parameter is
   set to false. User can override it via job submission time parameter.
   --> When this operator serves web-browser based client applications,
   it is better to set allowPersistentHttpConnections to false in order to
   avoid web page rendering issues. When it serves non-browser based client
   applications, it is fine to set allowPersistentHttpConnections to true.
   --> When enabled, this feature will keep the client's connection alive 
   as long as there is data arriving from the client continuously.
*/

// This is needed for supporting persistent HTTP connections.
// Activate the processing of the persistent HTTP connections.
class persistent_config_asio : public websocketpp::config::asio
{
public:
    static bool const enable_persistent_connections = true;
};

class persistent_config_asio_tls : public websocketpp::config::asio_tls
{
public:
    static bool const enable_persistent_connections = true;
};

class MY_OPERATOR : public MY_BASE_OPERATOR 
{
public:
	// Websocket related type definitions.
	// Define types for two different server endpoints, 
	// one for each config we are using.
	// This operator supports both non_tls http and https (TLS) server endpoints.
	// This is needed for supporting persistent HTTP connections.
	/*
	typedef websocketpp::server<websocketpp::config::asio> server_non_tls;
	typedef websocketpp::server<websocketpp::config::asio_tls> server_tls;
	*/
	typedef websocketpp::server<persistent_config_asio> server_non_tls;
	typedef websocketpp::server<persistent_config_asio_tls> server_tls;
	
	// Alias some of the bind related functions as they are a bit long
	// Type of the ssl context pointer is long so alias it
	typedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;
	
	// Operator related member variables.
	std::string operatorPhysicalName;
	SPL::int32 udpChannelNumber;
	// Operator parameter related variables.
	SPL::uint32 tlsPort;
	std::string certificateFileName;
	std::string certificatePassword;
	std::string trustedClientCertificateFileName;
	// Behind the scenes, an SPL list is nothing but a C++ std::vector.
	SPL::list<SPL::rstring> trustedClientX509SubjectIdentifiers;
	SPL::boolean nonTlsEndpointNeeded;
	SPL::uint32 nonTlsPort;
	SPL::list<SPL::rstring> urlContextPath;
	SPL::float64 initDelay;
	SPL::boolean websocketLiveMetricsUpdateNeeded;
	bool websocketLoggingNeeded;
	bool wsClientSessionLoggingNeeded;
	bool wsConnectionLoggingNeeded;
	SPL::int64 websocketStaleConnectionPurgeInterval;
	bool ipv6Available;
	// This variable is set via an operator parameter to
	// indicate whether this operator will allow HTTP(S) GET/PUT/POST from remote clients.
	bool allowHttpPost;
	// This is needed for supporting persistent HTTP connections.
	bool allowPersistentHttpConnections;
	SPL::int64 timeOfPreviousStaleConnectionRemoval;
	SPL::uint32 numberOfMessagesToReceiveBeforeAnAck;
	SPL::float64 newDataCpuYieldTimeInSenderThread;
	SPL::float64 noDataCpuYieldTimeInSenderThread;
	// Behind the scenes, an SPL list is nothing but a C++ std::vector.
	SPL::list<SPL::rstring> clientWhitelist;	
	SPL::uint32 maxClientConnectionsAllowed;
	SPL::uint32 responseTimeout;
	SPL::uint32 persistentConnectionTimeout;
	// WebSocket endpoint related variables.
	server_non_tls endpoint_non_tls;
	server_tls endpoint_tls;
	SPL::boolean tlsEndpointStarted;
	SPL::boolean nonTlsEndpointStarted;
	SPL::uint64 clientSessionId;
	SPL::boolean dataInputAsRString;
	SPL::boolean dataInputAsBlob;
	SPL::boolean dataOutputAsRString;
	SPL::boolean dataOutputAsBlob;
	std::vector<std::string> strDataToSend;
	std::vector<uint64_t> strDataToSendClientId;
	std::vector<unsigned char *> blobDataToSend;
	std::vector<uint64_t> blobDataSize;
	std::vector<uint64_t> blobDataToSendClientId;
	SPL::map<SPL::uint64, SPL::map<SPL::rstring, SPL::rstring>> httpResponseHeaders;

	// This mutex is to control the multithreaded shared R/W access of the 
	// five incoming tuple holding vectors and the httpResponseHeaders map declared just above here. 
	SPL::Mutex wsMutex1;
	// This mutex is to control the multithreaded shared R/W access of the 
	// client whitelist declared above.
	SPL::Mutex wsMutex2;
	// This mutex is to control the multithreaded shared R/W access of the
	// client connections map declared below.
	SPL::Mutex wsMutex3;
	
	// These variables hold the values needed for the operator metrics.
	SPL::uint64 nClientsConnected;
	SPL::uint64 nDataBytesReceivedFromRemoteClients;
	SPL::uint64 nDataItemsReceivedFromRemoteClients;
	SPL::uint64 nDataBytesSentToRemoteClients;
	SPL::uint64 nDataItemsSentToRemoteClients;
	SPL::uint64 nHttpMessagesReceivedFromRemoteClients;
	SPL::uint64 nResponseTimeoutOccurrences;
		
	// This is the structure that will get stored in the map declard below.
	struct connection_metadata {
		std::string remoteEndpoint;
	    std::string clientIpAddress;
	    std::string clientPort;
	    // Context path found in the URL being accessed by this client.
	    std::string urlContextPath;
	    // Full URL for this endpoint.
	    std::string fullUrl;
	    // File name portion of the URL 
	    // Applicable for HTTP GET that reequests for an HTML, image or other kinds of files.
	    std::string fileNameInUrlForHttpGet;
	    std::string serverIpAddress;
	    std::string serverPort;	    
	    bool isTlsConnection;
	    // Is this a connection made from a WS or HTTP client?
	    bool isHttpConnection;
	    // Is this a persistent (Keep-Alive) HTTP connection?
	    bool isPersistentHttpConnection;
	    // This field is used to terminate any peristent HTTP connection that
	    // has not received any request from the client for a period of time.
	    // It works in the same ways as the responseTimeoutCounter field below.
	    // Read the commentary there to get more details.
	    int32_t persistentConnectionTimeoutCounter;
	    // This is a unique websocket++ handle assigned for this connection.
	    websocketpp::connection_hdl hdl;
	    // The following two are the connection pointers which will get used only 
	    // if the "result/response back to the client" port is activated and 
	    // if the client connection is HTTP (POST) based.
	    server_non_tls::connection_ptr http_con_non_tls;
	    server_tls::connection_ptr http_con_tls;
		// Websocket session status will carry the following values:
		// 1 = Client opened a Websocket connection.
		// 2 = Client started the session to send data on a persistent connection.
		// 3 = Client ended the data exchange.
	    int32_t wsSessionStatus;
	    int64_t wsSessionStartTime;
	    // This field has effect when this operator has the
	    // "result/response back to the client" input port. 
	    // While being used, it is set to -1 when no response is due for this client.
	    // It is set to 0 whenever a new data item arrives from this client.
	    // It will get incremented every second until the response is sent or
	    // until this counter reaches the configured response timeout value.
	    // If the response times out, appropriate action will take place and
	    // this counter will be set back to -1.
	    int32_t responseTimeoutCounter;
	    uint64_t dataItemsReceivedCnt;
	    uint64_t dataBytesReceived;
	    uint64_t dataItemsSentCnt;
	    uint64_t dataBytesSent;
	    // This is a unique client id this operator will assign and 
	    // maintain for this connection. This is the id that will be given to
	    // the application layer to identify or correlate a given remote client within the
	    // data responses that the application layer will send back to that client.
	    // This C++ data type can hold a maximum value of 2**64-1.
	    // That value equals 18,446,744,073,709,551,615 which is so huge.
	    uint64_t clientSessionId;
	};
	
	// This technique of storing and tracking the client connection specific
	// details via an associative container is well discussed in this URL:
	// https://www.zaphoyd.com/websocketpp/manual/common-patterns/storing-connection-specificsession-information
	typedef std::map<websocketpp::connection_hdl, 
		connection_metadata, std::owner_less<websocketpp::connection_hdl>> con_map;
	
	// This map's key is connection_hdl and value is the connection_metadata structure.
	con_map client_connections_map;
	
	typedef std::map<uint64_t, websocketpp::connection_hdl> hdl_map;	
	
	// This map's key is client id and value is the connection handle.
	hdl_map client_id_to_hdl_map;

	// Custom metrics for this operator.
	Metric *nClientsConnectedMetric;
	Metric *nDataBytesReceivedFromRemoteClientsMetric;
	Metric *nDataItemsReceivedFromRemoteClientsMetric;
	Metric *nHttpMessagesReceivedFromRemoteClientsMetric;
	Metric *nDataBytesSentToRemoteClientsMetric;
	Metric *nDataItemsSentToRemoteClientsMetric;
	Metric *nResponseTimeoutOccurrencesMetric;
	Metric *nTlsPortMetric;
	Metric *nNonTlsPortNeededMetric;
	Metric *nNonTlsPortMetric;
	Metric *nHttpPostAllowedMetric;
	
	// Constructor
	MY_OPERATOR();

	// Destructor
	virtual ~MY_OPERATOR(); 

	// Notify port readiness
	void allPortsReady(); 

	// Notify pending shutdown
	void prepareToShutdown(); 

	// Processing for source and threaded operators   
	void process(uint32_t idx);
    
	// Tuple processing for mutating ports 
	void process(Tuple & tuple, uint32_t port);
    
	// Tuple processing for non-mutating ports
	void process(Tuple const & tuple, uint32_t port);

	// Punctuation processing
	void process(Punctuation const & punct, uint32_t port);

	// Websocket non_tls client validation handler.
	bool validate_non_tls_client(websocketpp::connection_hdl hdl);

	// Websocket TLS client validation handler.
	bool validate_tls_client(websocketpp::connection_hdl hdl);

	// Websocket client common validation handler.
	bool validate_client(websocketpp::connection_hdl hdl, 
		bool isTlsConnection, bool isHttpConnection,
		server_non_tls::connection_ptr & server_non_tls_con,
		server_tls::connection_ptr & server_tls_con);
		
	// Websocket non_tls client connection open handler.
	void on_open_non_tls(websocketpp::connection_hdl hdl);

	// Websocket TLS client connection open handler.
	void on_open_tls(websocketpp::connection_hdl hdl);
		
	// Websocket client connection common open handler.
	void on_open(websocketpp::connection_hdl hdl, bool isTlsConnection);
		
	// Websocket message reception event handler
	template <typename EndpointType>
	void on_message(EndpointType* s, websocketpp::connection_hdl hdl,
	    typename EndpointType::message_ptr msg);
	
	// Websocket client connection close handler.
	void on_close(websocketpp::connection_hdl hdl);
	
	// Websocket TLS binding event handler
	context_ptr on_tls_init(websocketpp::connection_hdl hdl);
	
	// HTTP event handler (for non_tls HTTP POST messages)
	void on_http_message_non_tls(websocketpp::connection_hdl hdl);
	
	// HTTP event handler (for TLS HTTPS POST messages)
	void on_http_message_tls(websocketpp::connection_hdl hdl);
	
	// HTTP common event handler (both for HTTP and HTTPS POST messages)
	void on_http_message(websocketpp::connection_hdl hdl, 
		bool isTlsConnection,
		server_non_tls::connection_ptr & server_non_tls_con,
		server_tls::connection_ptr & server_tls_con);

	// Validate a new HTTP connection and create a new connection entry in our
	// associate container if that connection is acceptable.
	bool validate_http_connection(websocketpp::connection_hdl hdl, 
		bool isTlsConnection,
		server_non_tls::connection_ptr & server_non_tls_con,
		server_tls::connection_ptr &  server_tls_con);
	
	// Callback method needed within the TLS event handler.
	std::string get_private_key_password();

	// Callback method to verify the presence of any application-specific 
	// string in a peer's public certificate's subject field.
	// This string could be any sub-field such as CN or an email address or the entire subject field.
	// Following are some examples of the subject line as it appears in an X509 public certificate.
	// /C=US/ST=NY/L=Yorktown Heights/O=IBM/OU=AI/CN=websocket.streams/emailAddress=websocket.streams@ibm.com
	// /C=US/O=Let's Encrypt/CN=Let's Encrypt Authority X3
	// /C=BE/O=GlobalSign nv-sa/CN=GlobalSign CloudSSL CA - SHA256 - G3
	// /C=US/O=Google Trust Services/CN=GTS CA 1O1
	// /C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Global Root CA	
	// /C=US/ST=New York/L=Armonk/O=IBM/CN=www.ibm.com
	bool verify_peer_certificate(bool preverified, boost::asio::ssl::verify_context & ctx);
	
	// Websocket data sender thread method
	void ws_data_sender();
	
	// Websocket request and response timeout handler thread method.
	void ws_request_response_timeout_handler();
	
	// Method that looks up connection metadata for a given connection handle in our associate container.
	MY_OPERATOR::connection_metadata & get_con_metadata_from_hdl(websocketpp::connection_hdl hdl);
	
	// Method that looks up connection handle for a given client id in our associative container.
	MY_OPERATOR::connection_metadata & get_con_metadata_from_client_id(uint64_t clientId);
	
	// This method creates a new connection entry in our associative container.
	bool create_new_connection_entry(websocketpp::connection_hdl hdl, 
		bool isTlsConnection, bool isHttpConnection, 
		server_non_tls::connection_ptr & con_non_tls,
		server_tls::connection_ptr & con_tls, 
		std::string callerIdentifier);
	
	// This method submits the text or binary data item received from a 
	// remote WS or HTTP client into the first output port of this operator.
	void submit_received_data_item(bool & isBinaryData, int32_t & payloadSize,
		std::string const & strData, SPL::blob & blobData, 
		websocketpp::connection_hdl & hdl,
		MY_OPERATOR::connection_metadata & con_metadata,
		std::string const & httpRequestMethod, 
		std::string const & urlQueryString,
		std::string const & httpRequestHeaders);

private:
	// These are the output attribute assignment functions for this operator.
	uint64_t getClientSessionId(uint64_t const & clientSessionId);
	std::string getClientIpAddress(std::string const & clientIpAddress);
	std::string getClientPort(std::string const & clientPort);
	std::string getUrlContextPath(std::string const & urlContextPath);
	bool isWebSocketClient(bool const & isWebSocketConnection);
	bool isHttpClient(bool const & isHttpConnection);
	uint64_t getTotalDataItemsReceived(uint64_t const & totalDataItemsReceived);
	uint64_t getTotalDataBytesReceived(uint64_t const & totalDataBytesReceived);
	uint64_t getTotalDataItemsSent(uint64_t const & totalDataItemsSent);
	uint64_t getTotalDataBytesSent(uint64_t const & totalDataBytesSent);
	std::string getHttpRequestMethodName(std::string const & httpRequestMethodName);
	SPL::map<SPL::rstring, SPL::rstring> getUrlQueryStringKeyValuePairs(std::string const & urlQueryString);
	SPL::map<SPL::rstring, SPL::rstring> getHttpRequestHeaders(std::string const & httpRequestHeaders);
	std::string getFullUrlBeingAccessedByTheClient(std::string const & fullUrl);
	std::string getFileNameInUrlForHttpGet(std::string const & fileNameInUrl);
}; 

<%SPL::CodeGen::headerEpilogue($model);%>
