<?xml version="1.0" encoding="UTF-8"?><operatorModel xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator" xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/operator operatorModel.xsd">
  <!--DO NOT EDIT THIS FILE - it is machine generated-->
  <javaOperatorModel>
    <!--Generated from com.ibm.streamsx.cppws.op.HttpPost in impl/java/bin/com/ibm/streamsx/cppws/op/HttpPost$StreamsModel.class at Thu Mar 26 22:40:48 EDT 2020-->
    <context>
      <description>This operator sends the incoming tuple's contents to the specified HTTP or HTTPS endpoint via the operator named url. The incoming tuple must have its first attribute with a data type rstring and it must carry string based content that needs be posted to the remote web server. Support for blob data will be added in a future version. This operator is mainly used to test the HTTP(S) feature available in the WebSocketSource operator from  the streamsx.cppws toolkit. If this operator can be useful in other application scenarios, developers can use it as they see fit.</description>
      <metrics/>
      <executionSettings>
        <className>com.ibm.streamsx.cppws.op.HttpPost</className>
      </executionSettings>
      <libraryDependencies>
        <library>
          <cmn:description>Operator class library</cmn:description>
          <cmn:managedLibrary>
            <cmn:libPath>../../impl/java/bin</cmn:libPath>
            <cmn:libPath>../../opt/HTTPClient-4.3.6/lib/*</cmn:libPath>
          </cmn:managedLibrary>
        </library>
      </libraryDependencies>
    </context>
    <parameters>
      <parameter>
        <name>contentType</name>
        <description>Specify the MIME content type that you want. Default is text/plain.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>logHttpPostActions</name>
        <description>Do you want to log HTTP POST actions to the screen? (Default: false)</description>
        <optional>true</optional>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>url</name>
        <description>Specify the URL where HTTP POSTs will be made to.</description>
        <optional>false</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
    </parameters>
    <inputPorts>
      <inputPortSet>
        <description>Receives tuples whose first string based attribute's content will be sent as the HTTP(S) POST content.</description>
        <windowingDescription/>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
        <controlPort>false</controlPort>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </inputPortSet>
      <inputPortOpenSet>
        <description>Optional input ports</description>
        <windowingDescription/>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
        <controlPort>false</controlPort>
      </inputPortOpenSet>
    </inputPorts>
    <outputPorts>
      <outputPortSet>
        <description>Emits a tuple containing the HTTP POST status code, status message and the response from the remote web server. This tuple's schema should be tuple&lt;int32 statusCode, rstring statusMessage, rstring responseMessage&gt;. Any other matching attributes from the incoming tuple will be forwarded via the output tuple.</description>
        <windowPunctuationOutputMode>Generating</windowPunctuationOutputMode>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </outputPortSet>
      <outputPortOpenSet>
        <description>Optional output ports</description>
        <windowPunctuationOutputMode>Generating</windowPunctuationOutputMode>
      </outputPortOpenSet>
    </outputPorts>
  </javaOperatorModel>
</operatorModel>