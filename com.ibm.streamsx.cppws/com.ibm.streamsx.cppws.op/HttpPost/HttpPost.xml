<?xml version="1.0" encoding="UTF-8"?><operatorModel xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator" xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/operator operatorModel.xsd">
  <!--DO NOT EDIT THIS FILE - it is machine generated-->
  <javaOperatorModel>
    <!--Generated from com.ibm.streamsx.cppws.op.HttpPost in impl/java/bin/com/ibm/streamsx/cppws/op/HttpPost$StreamsModel.class at Sun Jun 07 12:35:51 EDT 2020-->
    <context>
      <description>This operator sends the incoming tuple's text or binary content to a HTTP or HTTPS endpoint specified in the operator parameter named url. Every incoming tuple must have its first attribute with a data type rstring to carry any text based content that needs be posted to the remote web server. The second attribute must have a data type blob to carry any binary based content that needs to be posted to the remote web server. The third attribute in the incoming tuple should be of type map&lt;rstring, rstring&gt; and it can carry any application-specific custom HTTP request headers to be sent to the remote web server. Even though, a given incoming tuple must have both the rstring and blob typed data attributes, only one of them at a time can carry the data to be sent to the remote server during a given HTTP POST. On its output port, this operator emits a tuple containing the HTTP POST status code, status message, response headers, text based response and binary based response received from the remote web server. This output tuple's schema should be tuple&lt;int32 statusCode, rstring statusMessage, map&lt;rstring, rstring&gt; responseHeaders, rstring strData, blob blobData&gt;. To send text based data, users can set this operator's contentType parameter to text/plain or application/xml or application/json or application/x-www-form-urlencoded. To send binary based data, it should be set to application/octet-stream which tells this operator to use a web standard based mechanism available for including multipart MIME content. This operator is mainly used to test the HTTP(S) feature available in the WebSocketSource operator from the streamsx.cppws toolkit. If this operator can be useful in other application scenarios, developers can use it as they see fit. If you observe either a missing or an empty streamsx.cppws/com.ibm.streamsx.cppws/impl/java/bin directory, then you should run `ant all` from the streamsx.cppws/com.ibm.streamsx.cppws directory. That will compile this HttpPost Java operator.</description>
      <metrics>
        <metric>
          <name>nDataBytesReceived</name>
          <description>Total number of data bytes received from the remote remote web server.</description>
          <kind>Counter</kind>
        </metric>
        <metric>
          <name>nDataBytesSent</name>
          <description>Total number of data bytes sent to the remote remote web server.</description>
          <kind>Counter</kind>
        </metric>
        <metric>
          <name>nDataItemsReceived</name>
          <description>Number of data items received from the remote web server.</description>
          <kind>Counter</kind>
        </metric>
        <metric>
          <name>nDataItemsSent</name>
          <description>Number of data items sent to the remote web server.</description>
          <kind>Counter</kind>
        </metric>
        <metric>
          <name>nHttpPostFailed</name>
          <description>Number of failed HTTP POSTs to the remote web server.</description>
          <kind>Counter</kind>
        </metric>
      </metrics>
      <executionSettings>
        <className>com.ibm.streamsx.cppws.op.HttpPost</className>
      </executionSettings>
      <libraryDependencies>
        <library>
          <cmn:description>Operator class library</cmn:description>
          <cmn:managedLibrary>
            <cmn:libPath>../../impl/java/bin</cmn:libPath>
            <cmn:libPath>../../opt/HTTPClient-4.5.12/lib/*</cmn:libPath>
          </cmn:managedLibrary>
        </library>
      </libraryDependencies>
    </context>
    <parameters>
      <parameter>
        <name>contentType</name>
        <description>Specify the MIME content type that you want. Default is text/plain.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>delayBetweenConsecutiveHttpPosts</name>
        <description>Do you want to have a tiny delay in millseconds between consecutive HTTP Posts? (Default: 0 milliseconds i.e. no delay)</description>
        <optional>true</optional>
        <type>int32</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>httpTimeout</name>
        <description>This parameter can be used to configure the three commonly used HTTP timeout settings namely connect, connection request and socket timeout all with one value. (Default: 30 seconds)</description>
        <optional>true</optional>
        <type>int32</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>logHttpPostActions</name>
        <description>Do you want to log HTTP POST actions to the screen? (Default: false)</description>
        <optional>true</optional>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>tlsAcceptAllCertificates</name>
        <description>This parameter can be used to configure whether all TLS certificates can be accepted with a possibility for an insecure connection. If this parameter is set, the other two parameters `tlsTrustStoreFile` and `tlsKeyStoreFile` are not allowed. (Default: false)</description>
        <optional>true</optional>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>tlsKeyPassword</name>
        <description>This parameter specifies the password for the keys stored in the store.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>tlsKeyStoreFile</name>
        <description>This parameter if present should point to a key store file in JKS format which will be used for client authentication. This store should have client's certificate to prove its identity. When this parameter is present, then the tlsKeyPassword parameter must be present and the tlsKeyStorePassword can be optional.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>tlsKeyStorePassword</name>
        <description>This parameter specifies the password for the key store.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>tlsTrustStoreFile</name>
        <description>This parameter if present should point to a trust store file in JKS format which will be used for authenticating the remote web server. This store should have server's public certificate to verify its identity. When this parameter is present, then the tlsTrustStorePassword can be optional.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>tlsTrustStorePassword</name>
        <description>This parameter specifies the password for the trust store.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>url</name>
        <description>Specify the URL to which HTTP POSTs will be sent.</description>
        <optional>false</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
    </parameters>
    <inputPorts>
      <inputPortSet>
        <description>Receives tuples whose first string based attribute's content or the second blob based attribute's content will be sent as the HTTP(S) POST payload. So, the input tuple's first attribute should be of type rstring carrying the text payload to be sent, the second attribute should be of type blob carrying the binary payload to be sent and the third attribute should be of type map&lt;rstring, rstring&gt; populated with any application-specific custom HTTP request headers to be sent to the remote web server.</description>
        <windowingDescription/>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
        <controlPort>false</controlPort>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </inputPortSet>
      <inputPortOpenSet>
        <description>Optional input ports</description>
        <windowingDescription/>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
        <controlPort>false</controlPort>
      </inputPortOpenSet>
    </inputPorts>
    <outputPorts>
      <outputPortSet>
        <description>Emits a tuple containing the HTTP POST status code, status message, response headers and text or binary response received from the remote web server. This tuple's schema should be tuple&lt;int32 statusCode, rstring statusMessage, map&lt;rstring, rstring&gt; responseHeaders, rstring strData, blob blobData&gt;. Any other matching attributes from the incoming tuple will be forwarded via the output tuple.</description>
        <windowPunctuationOutputMode>Generating</windowPunctuationOutputMode>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </outputPortSet>
      <outputPortOpenSet>
        <description>Optional output ports</description>
        <windowPunctuationOutputMode>Generating</windowPunctuationOutputMode>
      </outputPortOpenSet>
    </outputPorts>
  </javaOperatorModel>
</operatorModel>